{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Note</p> <p>The official air documentation is now located at airdocs.fastapicloud.dev. This documentation remains for now to host the API reference.</p> <p> </p> <p> Air: The new web framework that breathes fresh air into Python web development. Built with FastAPI, Starlette, and Pydantic. </p> <p> </p>"},{"location":"#why-use-air","title":"Why use Air?","text":"<ul> <li>Powered by FastAPI - Designed to work with FastAPI so you can server your API and web pages from one app</li> <li>Fast to code - Tons of intuitive shortcuts and optimizations designed to expedite coding HTML with FastAPI</li> <li>Air Tags - Easy to write and performant HTML content generation using Python classes to render HTML</li> <li>Jinja Friendly - No need to write <code>response_class=HtmlResponse</code> and <code>templates.TemplateResponse</code> for every HTML view</li> <li>Mix Jinja and Air Tags - Jinja and Air Tags both are first class citizens. Use either or both in the same view!</li> <li>HTMX friendly - We love HTMX and provide utilities to use it with Air</li> <li>HTML form validation powered by pydantic - We love using pydantic to validate incoming data. Air Forms provide two ways to use pydantic with HTML forms (dependency injection or from within views)</li> <li>Easy to learn yet well documented - Hopefully Air is so intuitive and well-typed you'll barely need to use the documentation. In case you do need to look something up we're taking our experience writing technical books and using it to make documentation worth boasting about</li> </ul> <p>Documentation: https://feldroy.github.io/air/</p> <p>Source Code: https://github.com/feldroy/air</p>"},{"location":"#installation","title":"Installation","text":"<p>Install using <code>pip install -U air</code> or <code>conda install air -c conda-forge</code>.</p> <p>For <code>uv</code> users, just create a virtualenv and install the air package, like:</p> <pre><code>uv venv\nsource .venv/bin/activate\nuv add air\nuv add fastapi[standard]\n</code></pre>"},{"location":"#a-simple-example","title":"A Simple Example","text":"<p>Create a <code>main.py</code> with:</p> <pre><code>import air\n\napp = air.Air()\n\n\n@app.get(\"/\")\nasync def index():\n    return air.Html(air.H1(\"Hello, world!\", style=\"color: blue;\"))\n</code></pre> <p>Note</p> <p>This example uses Air Tags, which are Python classes that render as HTML. Air Tags are typed and documented, designed to work well with any code completion tool.</p>"},{"location":"#combining-fastapi-and-air","title":"Combining FastAPI and Air","text":"<p>Air is just a layer over FastAPI. So it is trivial to combine sophisticated HTML pages and a REST API into one app. </p> <pre><code>import air\nfrom fastapi import FastAPI\n\napp = air.Air()\napi = FastAPI()\n\n@app.get(\"/\")\ndef landing_page():\n    return air.Html(\n        air.Head(air.Title(\"Awesome SaaS\")),\n        air.Body(\n            air.H1(\"Awesome SaaS\"),\n            air.P(air.A(\"API Docs\", target=\"_blank\", href=\"/api/docs\")),\n        ),\n    )\n\n\n@api.get(\"/\")\ndef api_root():\n    return {\"message\": \"Awesome SaaS is powered by FastAPI\"}\n\n# Combining the Air and and FastAPI apps into one\napp.mount(\"/api\", api)\n</code></pre>"},{"location":"#combining-fastapi-and-air-using-jinja2","title":"Combining FastAPI and Air using Jinja2","text":"<p>Want to use Jinja2 instead of Air Tags? We've got you covered.</p> <pre><code>import air\nfrom fastapi import FastAPI\n\napp = air.Air()\napi = FastAPI()\n\n# Air's JinjaRenderer is a shortcut for using Jinja templates\njinja = air.JinjaRenderer(directory=\"templates\")\n\n@app.get(\"/\")\ndef index(request: Request):\n    return jinja(request, name=\"home.html\")\n\n@api.get(\"/\")\ndef api_root():\n    return {\"message\": \"Awesome SaaS is powered by FastAPI\"}\n\n# Combining the Air and and FastAPI apps into one\napp.mount(\"/api\", api)    \n</code></pre> <p>Don't forget the Jinja template!</p> <pre><code>&lt;!doctype html\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Awesome SaaS&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Awesome SaaS&lt;/h1&gt;\n        &lt;p&gt;\n            &lt;a target=\"_blank\" href=\"/api/docs\"&gt;API Docs&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note</p> <p>Using Jinja with Air is easier than with FastAPI. That's because as much as we enjoy Air Tags, we also love Jinja!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>For guidance on setting up a development environment and how to make a contribution to Air, see Contributing to Air.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Eager to get started? This page gives a good introduction to Air. </p>"},{"location":"quickstart/#a-minimal-application","title":"A Minimal Application","text":"<p>A minimal Air application:</p> Air TagsJinja2 main.py<pre><code>import air\n\napp = air.Air()\n\n@app.get('/')\nasync def index():\n    return air.H1('Hello, world')\n</code></pre> <p>So what does this code do?</p> <ol> <li>First we import the air project</li> <li>Next we instantiate the Air app. <code>air.Air</code> is just a convenience wrapper around <code>fastapi.FastAPI</code> that sets the <code>default_response_class</code> to be <code>air.AirResponse</code></li> <li>We define a GET route using <code>@app.get</code>, with comes with a response class of <code>AirResponse</code>. Now, when we return Air Tags, they are automatically rendered as HTML</li> <li>We return <code>air.H1</code>, which renders as an <code>&lt;h1&gt;&lt;/h1&gt;</code> tag. The response type is <code>text/html</code>, so browsers display web pages</li> </ol> main.py<pre><code>import air    \nfrom air import Request\n\napp = Air()\njinja = air.JinjaRenderer(directory=\"templates\")\n\n@app.get('/')\nasync def index(request: Request):\n    return jinja(\n        request,\n        name=\"home.html\"\n    )       \n</code></pre> templates/home.html<pre><code>&lt;h1&gt;Hello, world&lt;/h1&gt;\n</code></pre> <p>So what does this code do?</p> <ol> <li>First we import the air project and a few select things from FastAPI.</li> <li>Next we instantiate the Air app. <code>air.Air</code> is just a convenience wrapper around <code>fastapi.FastAPI</code> that sets the <code>default_response_class</code> to be <code>air.AirResponse</code></li> <li>We use <code>JinjaRenderer</code> factory to configure a <code>render()</code> shortcut. This is easier to remember and faster to type than <code>template.TemplateResponse</code></li> <li>We define a GET route using <code>@app.get</code>. Unlike normal FastAPI projects using Jinja we don't need to set the <code>response_class</code> to HtmlResponse. That's because the <code>air.Air</code> wrapper handles that for us</li> <li>Our return calls <code>render()</code>, which reads the specified Jinja2 template and then produces the result as an <code>&lt;h1&gt;&lt;/h1&gt;</code> tag. The response type is <code>text/html</code>, so browsers display web pages</li> </ol>"},{"location":"quickstart/#running-apps","title":"Running Apps","text":"<p>To run your Air application with uvicorn:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>Where:</p> <ul> <li><code>main</code> is the name of your Python file (main.py)</li> <li><code>app</code> is the name of your FastAPI instance</li> <li><code>--reload</code> enables auto-reloading when you make changes to your code (useful for development)</li> </ul> <p>Once the server is running, open your browser and navigate to:</p> <ul> <li>http://localhost:8000 - Your application</li> </ul>"},{"location":"quickstart/#running-apps-with-fastapi","title":"Running Apps with <code>fastapi</code>","text":"<p>As Air is just a layer on top of FastAPI, you can use the <code>fastapi</code> command to run Air. In fact, this is how some of the core developers prefer to run Air.</p> <p>In any case, first make sure <code>fastapi[standard]</code> is installed:</p> <pre><code># pip\npip install \"fastapi[standard]\"\n# uv\nuv add \"fastapi[standard]\"\n</code></pre> <p>Then run the cli command:</p> <pre><code>fastapi dev\n</code></pre>"},{"location":"quickstart/#the-apppage-decorator","title":"The <code>app.page</code> decorator","text":"<p>For simple HTTP GET requests, Air provides the handy <code>@app.page</code> shortcut. </p> Air TagsJinja2 main.py<pre><code>import air\n\napp = air.Air()\n\n\n@app.page\ndef dashboard():\n    return H1('Dashboard')\n</code></pre> main.py<pre><code>import air    \nfrom air import Request\n\napp = air.Air()\njinja = air.JinjaRenderer(directory=\"templates\")\n\n@app.page\nasync def dashboard(request: Request):\n    return jinja(\n        request,\n        name=\"dashboard.html\"\n    )     \n</code></pre> templates/dashboard.html<pre><code>&lt;h1&gt;Dashboard&lt;/h1&gt;\n</code></pre>"},{"location":"quickstart/#charting-with-air","title":"Charting with Air","text":"<p>FastAPI is awesome at producing JSON for chart libraries, and Air Tags makes that even better. Here's a simple yet animated example of using Plotly+Air to provide charts.</p> main.py<pre><code>import json\nimport random\nimport air\n\napp = air.Air()\n\ndef sorted_random_list():\n    return [0] + sorted(random.sample(range(1, 9), 4)) + [10]\n\ndef generate_data():\n    return json.dumps(\n        {\n            \"data\": [\n                {\n                    \"x\": sorted_random_list(),\n                    \"y\": random.sample(range(10), 6),\n                    \"type\": \"scatter\",\n                },\n                {\n                    \"x\": sorted_random_list(),\n                    \"y\": random.sample(range(10), 6),\n                    \"type\": \"scatter\",\n                },\n            ],\n            \"title\": \"Fun charts with Plotly and Air\",\n            \"description\": \"This is a demonstration of how to build a chart using Plotly and Air\",\n            \"type\": \"scatter\",\n        }\n    )\n\n@app.page\ndef index():\n    data = generate_data()\n    # Use picocss layout to make things pretty \n    return air.layouts.picocss( \n        air.Title(\"Chart Demo\"),\n        air.Script(src=\"https://cdn.plot.ly/plotly-3.0.1.min.js\"),\n        air.H1(\"Animated line chart by Air and Plotly\"),\n        air.Div(id=\"randomChart\"),\n        # We place Script inside air.Tags, which simply passes it through. \n        # We do this so it renders inside the page body instead of the page header\n        air.Tags( \n            # Call the Plotly library to plot the library\n            air.Script( \n                f\"var data = {data}; Plotly.newPlot('randomChart', data);\",\n                # Used to help HTMX know where to replace data\n                id=\"dataSource\",\n                # Trigger HTMX to call new data every 2 seconds\n                hx_trigger=\"every 2s\",\n                # Use HTMX to fetch new info from the /data route\n                hx_get=\"/data\",\n                # When the data is fetched, replace the whole tag\n                hx_swap='outerHTML'\n            )\n        ),\n    )\n\n@app.page\ndef data():\n    data = generate_data()\n    # This replaces the script in the web page with new data, and triggers\n    # an animation of the transition\n    return air.Script(\n        f\"var data = {data}; Plotly.animate('randomChart', data);\",\n        id=\"dataSource\",\n        hx_trigger=\"every 2s\",\n        hx_get=\"/data\",\n        hx_swap='outerHTML'\n    )\n</code></pre>"},{"location":"quickstart/#form-validation-with-air-forms","title":"Form Validation with Air Forms","text":"<p>Built on pydantic's <code>BaseModel</code>, the <code>air.AirForm</code> class is used to validate data coming from HTML forms.</p>"},{"location":"quickstart/#form-handling-in-views","title":"Form handling in views","text":"Air TagsJinja2 main.py<pre><code>from typing import Annotated\n\nfrom fastapi import Depends, Request\nfrom pydantic import BaseModel\nimport air\n\napp = air.Air()\n\n\nclass CheeseModel(BaseModel):\n    name: str\n    age: int\n\n\nclass CheeseForm(air.AirForm):\n    model = CheeseModel\n\n\n@app.page\nasync def cheese():\n    return air.Html(\n        air.H1(\"Cheese Form\"),\n        air.Form(\n            air.Input(name=\"name\"),\n            air.Input(name=\"age\", type=\"number\"),\n            air.Button(\"Submit\", type=\"submit\"),\n            method=\"post\",\n            action=\"/cheese-info\",\n        ),\n    )\n\n\n@app.post(\"/cheese-info\")\nasync def cheese_info(request: Request):\n    cheese = await CheeseForm.validate(request)\n    if cheese.is_valid:\n        return air.Html(air.H1(cheese.data.name))\n    return air.Html(air.H1(f\"Errors {len(cheese.errors)}\"))\n</code></pre> main.py<pre><code>import air\nfrom air import Request\nfrom fastapi import Depends\nfrom pydantic import BaseModel\nfrom typing import Annotated\n\n\napp = air.Air()\njinja = air.JinjaRenderer(directory=\"templates\")\n\n\nclass CheeseModel(BaseModel):\n    name: str\n    age: int\n\n\nclass CheeseForm(air.AirForm):\n    model = CheeseModel\n\n\n@app.page\nasync def cheese(request: Request):\n    return jinja(request, name=\"cheese_form.html\")\n\n\n@app.post(\"/cheese-info\")\nasync def cheese_info(request: Request):\n    cheese = await CheeseForm.validate(request)\n    return jinja(request, name=\"cheese_info.html\", cheese=cheese)\n</code></pre> templates/cheese_form.html<pre><code>&lt;h1&gt;Cheese Form&lt;/h1&gt;\n&lt;form method=\"post\" action=\"/cheese-info\"&gt;\n  &lt;input name=\"name\"&gt;\n  &lt;input name=\"age\" type=\"number\"&gt;\n  &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> templates/cheese_info.html<pre><code>{% if cheese.is_valid %}\n    &lt;h1&gt;{{cheese.data.name}}&lt;/h1&gt;\n    &lt;p&gt;Age: {{cheese.data.age}}&lt;/p&gt;\n{% else %}\n    &lt;h1&gt;Errors {{len(cheese.errors)}}&lt;/h1&gt;\n{% endif %}\n</code></pre>"},{"location":"quickstart/#form-handling-using-dependency-injection","title":"Form handling using dependency injection","text":"<p>It is possible to use AirForms through FastAPI's dependency injection mechanism.</p> Air TagsJinja2 main.py<pre><code>from typing import Annotated\n\nfrom fastapi import Depends\nfrom pydantic import BaseModel\nimport air\n\napp = air.Air()\n\n\nclass CheeseModel(BaseModel):\n    name: str\n    age: int\n\n\nclass CheeseForm(air.AirForm):\n    model = CheeseModel\n\n\n@app.page\nasync def cheese():\n    return air.Html(\n        air.H1(\"Cheese Form\"),\n        air.Form(\n            air.Input(name=\"name\"),\n            air.Input(name=\"age\", type=\"number\"),\n            air.Button(\"Submit\", type=\"submit\"),\n            method=\"post\",\n            action=\"/cheese-info\",\n        ),\n    )\n\n\n@app.post(\"/cheese-info\")\nasync def cheese_info(cheese: Annotated[CheeseForm, Depends(CheeseForm.validate)]):\n    if cheese.is_valid:\n        return air.Html(air.H1(cheese.data.name))\n    return air.Html(air.H1(f\"Errors {len(cheese.errors)}\"))\n</code></pre> main.py<pre><code>import air\nfrom air import Request\nfrom fastapi import Depends\nfrom pydantic import BaseModel\nfrom typing import Annotated\n\n\napp = air.Air()\njinja = air.JinjaRenderer(directory=\"templates\")\n\n\nclass CheeseModel(BaseModel):\n    name: str\n    age: int\n\n\nclass CheeseForm(air.AirForm):\n    model = CheeseModel\n\n\n@app.page\nasync def cheese(request: Request):\n    return jinja(request, name=\"cheese_form.html\")\n\n\n@app.post(\"/cheese-info\")\nasync def cheese_info(\n    request: Request, cheese: Annotated[CheeseForm, Depends(CheeseForm.validate)]\n):\n    return jinja(request, name=\"cheese_info.html\", cheese=cheese)\n</code></pre> templates/cheese_form.html<pre><code>&lt;h1&gt;Cheese Form&lt;/h1&gt;\n&lt;form method=\"post\" action=\"/cheese-info\"&gt;\n  &lt;input name=\"name\"&gt;\n  &lt;input name=\"age\" type=\"number\"&gt;\n  &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> templates/cheese_info.html<pre><code>{% if cheese.is_valid %}\n    &lt;h1&gt;{{cheese.data.name}}&lt;/h1&gt;\n    &lt;p&gt;Age: {{cheese.data.age}}&lt;/p&gt;\n{% else %}\n    &lt;h1&gt;Errors {{len(cheese.errors)}}&lt;/h1&gt;\n{% endif %}\n</code></pre>"},{"location":"api/","title":"Air Reference","text":"<p>Here is the Air reference documentation. It explains how to do things, as well as providing reference details for nearly every object in the Air code.</p>"},{"location":"api/applications/","title":"Applications","text":""},{"location":"api/applications/#air.applications.Air","title":"Air","text":"<pre><code>Air(*, debug=False, routes=None, servers=None, dependencies=None, default_response_class=AirResponse, redirect_slashes=True, middleware=None, exception_handlers=None, on_startup=None, on_shutdown=None, lifespan=None, webhooks=None, deprecated=None, docs_url=None, redoc_url=None, openapi_url=None, **extra)\n</code></pre> <p>               Bases: <code>FastAPI</code></p> <p>FastAPI wrapper class with AirResponse as the default response class.</p> <p>Parameters:</p> Name Type Description Default <code>debug</code> <code>bool</code> <p>Enables additional logging or diagnostic output.</p> <code>False</code> <code>dependencies</code> <code>Optional[Sequence[Depends]]</code> <p>A list of global dependencies, they will be applied to each path operation,     including in sub-routers.</p> <code>None</code> <code>middleware</code> <code>Optional[Sequence[Middleware]]</code> <p>List of middleware to be added when creating the application.</p> <code>None</code> <code>default_response_class</code> <code>Type[Response]</code> <p>The default response class to be used.</p> <code>AirResponse</code> <code>redirect_slashes</code> <code>bool</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't     use the same format.</p> <code>True</code> <code>on_startup</code> <code>Optional[Sequence[Callable[[], Any]]]</code> <p>A list of startup event handler functions.</p> <code>None</code> <code>on_shutdown</code> <code>Optional[Sequence[Callable[[], Any]]]</code> <p>A list of shutdown event handler functions.</p> <code>None</code> <code>lifespan</code> <code>Optional[Lifespan[AppType]]</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and     <code>shutdown</code> functions with a single context manager.</p> <code>None</code> <p>Example:</p> <pre><code>import air\n\napp = air.Air()\n</code></pre> <p>This preserves all FastAPI initialization parameters while setting AirResponse as the default response class.</p> Source code in <code>src/air/applications.py</code> <pre><code>def __init__(\n    self: AppType,\n    *,\n    debug: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Boolean indicating if debug tracebacks should be returned on server\n            errors.\n\n            Read more in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#instantiating-the-application).\n            \"\"\"\n        ),\n    ] = False,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with FastAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In FastAPI, you normally would use the *path operation methods*,\n            like `app.get()`, `app.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    servers: Annotated[\n        Optional[List[Dict[str, Union[str, Any]]]],\n        Doc(\n            \"\"\"\n            A `list` of `dict`s with connectivity information to a target server.\n\n            You would use it, for example, if your application is served from\n            different domains and you want to use the same Swagger UI in the\n            browser to interact with each of them (instead of having multiple\n            browser tabs open). Or if you want to leave fixed the possible URLs.\n\n            If the servers `list` is not provided, or is an empty `list`, the\n            default value would be a `dict` with a `url` value of `/`.\n\n            Each item in the `list` is a `dict` containing:\n\n            * `url`: A URL to the target host. This URL supports Server Variables\n            and MAY be relative, to indicate that the host location is relative\n            to the location where the OpenAPI document is being served. Variable\n            substitutions will be made when a variable is named in `{`brackets`}`.\n            * `description`: An optional string describing the host designated by\n            the URL. [CommonMark syntax](https://commonmark.org/) MAY be used for\n            rich text representation.\n            * `variables`: A `dict` between a variable name and its value. The value\n                is used for substitution in the server's URL template.\n\n            Read more in the\n            [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#additional-servers).\n\n            **Example**\n\n            ```python\n            from fastapi import FastAPI\n\n            app = FastAPI(\n                servers=[\n                    {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n                    {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n                ]\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of global dependencies, they will be applied to each\n            *path operation*, including in sub-routers.\n\n            Read more about it in the\n            [FastAPI docs for Global Dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/global-dependencies/).\n\n            **Example**\n\n            ```python\n            from fastapi import Depends, FastAPI\n\n            from .dependencies import func_dep_1, func_dep_2\n\n            app = FastAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n            Read more in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n            **Analogy**\n            ```python\n            from fastapi import FastAPI\n            from air import AirResponse\n            app = FastAPI(default_response_class=AirResponse)\n            ```\n            \"\"\"\n        ),\n    ] = AirResponse,\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n\n            **Example**\n\n            ```python\n            from fastapi import FastAPI\n\n            app = FastAPI(redirect_slashes=True)  # the default\n\n            @app.get(\"/items/\")\n            async def read_items():\n                return [{\"item_id\": \"Foo\"}]\n            ```\n\n            With this app, if a client goes to `/items` (without a trailing slash),\n            they will be automatically redirected with an HTTP status code of 307\n            to `/items/`.\n            \"\"\"\n        ),\n    ] = True,\n    middleware: Annotated[\n        Optional[Sequence[Middleware]],\n        Doc(\n            \"\"\"\n            List of middleware to be added when creating the application.\n\n            In FastAPI you would normally do this with `app.add_middleware()`\n            instead.\n\n            Read more in the\n            [FastAPI docs for Middleware](https://fastapi.tiangolo.com/tutorial/middleware/).\n            \"\"\"\n        ),\n    ] = None,\n    exception_handlers: Annotated[\n        Optional[\n            Dict[\n                Union[int, Type[Exception]],\n                Callable[[Request, Any], Coroutine[Any, Any, Response]],\n            ]\n        ],\n        Doc(\n            \"\"\"\n            A dictionary with handlers for exceptions.\n\n            In FastAPI, you would normally use the decorator\n            `@app.exception_handler()`.\n\n            Read more in the\n            [FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).\n            \"\"\"\n        ),\n    ] = None,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    lifespan: Annotated[\n        Optional[Lifespan[AppType]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    webhooks: Annotated[\n        Optional[routing.APIRouter],\n        Doc(\n            \"\"\"\n            Add OpenAPI webhooks. This is similar to `callbacks` but it doesn't\n            depend on specific *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Note**: This is available since OpenAPI 3.1.0, FastAPI 0.99.0.\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* as deprecated. You probably don't need it,\n            but it's available.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    docs_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path at which to serve the Swagger UI documentation.\n\n            Set to `None` to disable it.\n            \"\"\"\n        ),\n    ] = None,\n    redoc_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path at which to serve the ReDoc documentation.\n\n            Set to `None` to disable it.\n            \"\"\"\n        ),\n    ] = None,\n    openapi_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL where the OpenAPI schema will be served from.\n\n            Set to `None` to disable it.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Extra keyword arguments to be stored in the app, not used by FastAPI\n            anywhere.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"Initialize Air app with AirResponse as default response class.\n\n    This preserves all FastAPI initialization parameters while setting\n    AirResponse as the default response class.\n    \"\"\"\n    DEFAULT_EXCEPTION_HANDLERS: dict[int, BuiltinFunctionType] = {\n        404: default_404_exception_handler\n    }\n    if exception_handlers is None:\n        exception_handlers = {}\n    exception_handlers = DEFAULT_EXCEPTION_HANDLERS | exception_handlers\n    super().__init__(  # ty: ignore [invalid-super-argument]\n        debug=debug,\n        routes=routes,\n        servers=servers,\n        dependencies=dependencies,\n        default_response_class=default_response_class,\n        middleware=middleware,\n        exception_handlers=exception_handlers,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n        docs_url=docs_url,\n        redoc_url=redoc_url,\n        openapi_url=openapi_url,\n        webhooks=webhooks,\n        deprecated=deprecated,\n        **extra,\n    )\n</code></pre>"},{"location":"api/applications/#air.applications.Air.page","title":"page","text":"<pre><code>page(func)\n</code></pre> <p>Decorator that creates a GET route using the function name as the path.</p> <p>If the name of the function is \"index\", then the route is \"/\".</p> <p>Examples:</p> <pre><code>import air\n\napp = Air()\n\n@app.page\ndef index():\n    return H1(\"I am the home page\")\n</code></pre> Source code in <code>src/air/applications.py</code> <pre><code>def page(self, func):\n    \"\"\"Decorator that creates a GET route using the function name as the path.\n\n    If the name of the function is \"index\", then the route is \"/\".\n\n    Examples:\n\n        import air\n\n        app = Air()\n\n        @app.page\n        def index():\n            return H1(\"I am the home page\")\n    \"\"\"\n    if func.__name__ == \"index\":\n        route_name = \"/\"\n    else:\n        route_name = f\"/{func.__name__}\"\n    return self.get(route_name)(func)\n</code></pre>"},{"location":"api/background/","title":"Background Tasks","text":"<p>Background Tasks are Python functions that are called after a response is returned to the user. They are useful for long running tasks like emails or batch processing.</p>"},{"location":"api/background/#air.background.BackgroundTasks","title":"BackgroundTasks","text":"<p>               Bases: <code>BackgroundTasks</code></p> <p>A collection of background tasks that will be called after a response has been sent to the client.</p>"},{"location":"api/background/#air.background.BackgroundTasks--example","title":"Example","text":"<pre><code>from air import BackgroundTasks, Air\nfrom air.layouts import picocss\n\napp = Air()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    message = \"some notification\"\n    background_tasks.add_task(write_notification, email, message=message)\n    content = f\"notification for {email}: {message}\"\n    return picocss(\n        air.Title(content),\n        air.H1(content)\n    )\n</code></pre>"},{"location":"api/background/#air.background.BackgroundTasks.add_task","title":"add_task","text":"<pre><code>add_task(func, *args, **kwargs)\n</code></pre> <p>Add a function to be called in the background after the response is sent.</p> Source code in <code>src/air/background.py</code> <pre><code>def add_task(\n    self,\n    func: Annotated[\n        Callable[P, Any],\n        Doc(\n            \"\"\"\n            The function to call after the response is sent.\n\n            It can be a regular `def` function or an `async def` function.\n            \"\"\"\n        ),\n    ],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -&gt; None:\n    \"\"\"\n    Add a function to be called in the background after the response is sent.\n    \"\"\"\n    return super().add_task(func, *args, **kwargs)\n</code></pre>"},{"location":"api/forms/","title":"Forms","text":""},{"location":"api/forms/#air.forms.AirForm","title":"AirForm","text":"<pre><code>AirForm(initial_data=None)\n</code></pre> <p>A form handler that validates incoming form data against a Pydantic model. To be used with FastAPI's dependency injection system.</p> <pre><code>class CheeseModel(pydantic.BaseModel):\n    name: str\n    age: int\n\nclass CheeseForm(air.AirForm):\n    model = CheeseModel\n\n@app.post(\"/cheese\")\nasync def cheese_form(cheese: Annotated[CheeseForm, Depends(CheeseForm())]):\n    if cheese.is_valid:\n        return air.Html(air.H1(cheese.data.name))\n    return air.Html(air.H1(air.Raw(str(len(cheese.errors)))))\n</code></pre> <p>NOTE: This is named AirForm to avoid collisions with tags.Form</p> Source code in <code>src/air/forms.py</code> <pre><code>def __init__(self, initial_data: dict | None = None):\n    if self.model is None:\n        raise NotImplementedError(\"model\")\n    self.initial_data = initial_data\n</code></pre>"},{"location":"api/forms/#air.forms.AirForm.widget","title":"widget  <code>property</code>","text":"<pre><code>widget\n</code></pre> <p>Widget for rendering of form in HTML</p> <p>If you want a custom widget, replace with a function that accepts:</p> <pre><code>- model: BaseModel\n- data: dict|None\n- errors:dict|None=None\n</code></pre>"},{"location":"api/forms/#air.forms.AirField","title":"AirField","text":"<pre><code>AirField(default=None, *, type=None, label=None, default_factory=None, alias=None, title=None, description=None, gt=None, ge=None, lt=None, le=None, multiple_of=None, min_length=None, max_length=None, pattern=None, max_digits=None, decimal_places=None, examples=None, deprecated=None, exclude=False, discriminator=None, frozen=None, validate_default=None, repr=True, init_var=None, kw_only=None, json_schema_extra=None, **extra)\n</code></pre> <p>A wrapper around pydantic.Field to provide a cleaner interface for defining special input types and labels in air forms.</p> <p>NOTE: This is named AirField to adhere to the same naming convention as AirForm.</p> Source code in <code>src/air/forms.py</code> <pre><code>def AirField(\n    default: Any = None,\n    *,\n    type: str | None = None,\n    label: str | None = None,\n    default_factory: Callable[[], Any] | None = None,\n    alias: str | None = None,\n    title: str | None = None,\n    description: str | None = None,\n    gt: float | None = None,\n    ge: float | None = None,\n    lt: float | None = None,\n    le: float | None = None,\n    multiple_of: float | None = None,\n    min_length: int | None = None,\n    max_length: int | None = None,\n    pattern: str | None = None,\n    max_digits: int | None = None,\n    decimal_places: int | None = None,\n    examples: list[Any] | None = None,\n    deprecated: bool | str | None = None,\n    exclude: bool = False,\n    discriminator: str | None = None,\n    frozen: bool | None = None,\n    validate_default: bool | None = None,\n    repr: bool = True,\n    init_var: bool | None = None,\n    kw_only: bool | None = None,\n    json_schema_extra: dict | None = None,\n    **extra: Any,\n) -&gt; Any:\n    \"\"\"A wrapper around pydantic.Field to provide a cleaner interface for defining\n    special input types and labels in air forms.\n\n    NOTE: This is named AirField to adhere to the same naming convention as AirForm.\n    \"\"\"\n    if json_schema_extra is None:\n        json_schema_extra = {}\n    if type:\n        json_schema_extra[type] = True\n    if label:\n        json_schema_extra[\"label\"] = label\n\n    return Field(\n        default,\n        json_schema_extra=json_schema_extra,\n        default_factory=default_factory,\n        alias=alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        multiple_of=multiple_of,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        examples=examples,\n        deprecated=deprecated,\n        exclude=exclude,\n        discriminator=discriminator,\n        frozen=frozen,\n        validate_default=validate_default,\n        repr=repr,\n        init_var=init_var,\n        kw_only=kw_only,\n        **extra,\n    )\n</code></pre>"},{"location":"api/forms/#air.forms.errors_to_dict","title":"errors_to_dict","text":"<pre><code>errors_to_dict(errors)\n</code></pre> <p>Converts a pydantic error list to a dictionary for easier reference.</p> Source code in <code>src/air/forms.py</code> <pre><code>def errors_to_dict(errors: list[dict] | None) -&gt; dict[str, dict]:\n    \"Converts a pydantic error list to a dictionary for easier reference.\"\n    if errors is None:\n        return {}\n    return {error[\"loc\"][0]: error for error in errors}\n</code></pre>"},{"location":"api/forms/#air.forms.pydantic_type_to_html_type","title":"pydantic_type_to_html_type","text":"<pre><code>pydantic_type_to_html_type(field_info)\n</code></pre> <p>Return HTML type from pydantic type.</p> <p>Default to 'text' for unknown types.</p> Source code in <code>src/air/forms.py</code> <pre><code>def pydantic_type_to_html_type(field_info: Any) -&gt; str:\n    \"\"\"Return HTML type from pydantic type.\n\n    Default to 'text' for unknown types.\n    \"\"\"\n    special_fields = [\n        \"hidden\",\n        \"email\",\n        \"password\",\n        \"url\",\n        \"datedatetime-local\",\n        \"month\",\n        \"time\",\n        \"color\",\n        \"file\",\n    ]\n    for field in special_fields:\n        if field_info.json_schema_extra and field_info.json_schema_extra.get(\n            field, False\n        ):\n            return field\n\n    return {int: \"number\", float: \"number\", bool: \"checkbox\", str: \"text\"}.get(\n        field_info.annotation, \"text\"\n    )\n</code></pre>"},{"location":"api/layouts/","title":"Layouts","text":""},{"location":"api/layouts/#air.layouts.filter_body_tags","title":"filter_body_tags","text":"<pre><code>filter_body_tags(tags)\n</code></pre> <p>Given a list of tags, only list the ones that belong in body.</p> Source code in <code>src/air/layouts.py</code> <pre><code>def filter_body_tags(tags) -&gt; list:\n    \"\"\"Given a list of tags, only list the ones that belong in body.\"\"\"\n    return [t for t in tags if not isinstance(t, HEAD_TAG_TYPES)]\n</code></pre>"},{"location":"api/layouts/#air.layouts.filter_head_tags","title":"filter_head_tags","text":"<pre><code>filter_head_tags(tags)\n</code></pre> <p>Given a list of tags, only list the ones that belong in head.</p> Source code in <code>src/air/layouts.py</code> <pre><code>def filter_head_tags(tags) -&gt; list:\n    \"\"\"Given a list of tags, only list the ones that belong in head.\"\"\"\n    return [t for t in tags if isinstance(t, HEAD_TAG_TYPES)]\n</code></pre>"},{"location":"api/layouts/#air.layouts.mvpcss","title":"mvpcss","text":"<pre><code>mvpcss(*children, htmx=True, **kwargs)\n</code></pre> <p>Renders the basic layout with MVP.css and HTMX for quick prototyping</p> <ol> <li>At the top level HTML head tags are put in the <code>&lt;head&gt;</code> tag</li> <li>Otherwise everything is put in the <code>&lt;body&gt;</code></li> <li>HTMX is the default, change with the <code>htmx</code> keyword argument</li> </ol> <code>MVP.css</code> is a quick prototyping tool. It isn't designed to be extensible. <p>Rather the <code>mvpcss</code> layout function makes it easy to roll out quick demonstrations and proofs-of-concept. For more advanced layouts like Eidos or a full-fledged PicoCSS implementation, you'll have to create your own layouts.</p> Source code in <code>src/air/layouts.py</code> <pre><code>def mvpcss(*children, htmx: bool = True, **kwargs):\n    \"\"\"Renders the basic layout with MVP.css and HTMX for quick prototyping\n\n    1. At the top level HTML head tags are put in the `&lt;head&gt;` tag\n    2. Otherwise everything is put in the `&lt;body&gt;`\n    3. HTMX is the default, change with the `htmx` keyword argument\n\n    Note: `MVP.css` is a quick prototyping tool. It isn't designed to be extensible.\n        Rather the `mvpcss` layout function makes it easy to roll out quick demonstrations and proofs-of-concept.\n        For more advanced layouts like Eidos or a full-fledged PicoCSS implementation,\n        you'll have to create your own layouts.\n    \"\"\"\n    body_tags = filter_body_tags(children)\n    head_tags = filter_head_tags(children)\n    if htmx:\n        head_tags.insert(\n            0,\n            Script(\n                src=\"https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js\",\n                integrity=\"sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm\",\n                crossorigin=\"anonymous\",\n            ),\n        )\n    return Html(\n        Head(\n            Link(rel=\"stylesheet\", href=\"https://unpkg.com/mvp.css\"),\n            *head_tags,\n        ),\n        Body(Main(*body_tags)),\n    ).render()\n</code></pre>"},{"location":"api/layouts/#air.layouts.picocss","title":"picocss","text":"<pre><code>picocss(*children, htmx=True, **kwargs)\n</code></pre> <p>Renders the basic layout with PicoCSS and HTMX for quick prototyping</p> <ol> <li>At the top level HTML head tags are put in the <code>&lt;head&gt;</code> tag</li> <li>Otherwise everything is put in the <code>&lt;body&gt;</code></li> <li>HTMX is the default, change with the <code>htmx</code> keyword argument</li> </ol> <code>PicoCSS</code> is a quick prototyping tool. It isn't designed to be extensible. <p>Rather the <code>pico</code> layout function makes it easy to roll out quick demonstrations and proofs-of-concept. For more advanced layouts like Eidos or a full-fledged PicoCSS implementation, you'll have to create your own layouts.</p> Source code in <code>src/air/layouts.py</code> <pre><code>def picocss(*children, htmx: bool = True, **kwargs):\n    \"\"\"Renders the basic layout with PicoCSS and HTMX for quick prototyping\n\n    1. At the top level HTML head tags are put in the `&lt;head&gt;` tag\n    2. Otherwise everything is put in the `&lt;body&gt;`\n    3. HTMX is the default, change with the `htmx` keyword argument\n\n    Note: `PicoCSS` is a quick prototyping tool. It isn't designed to be extensible.\n        Rather the `pico` layout function makes it easy to roll out quick demonstrations and proofs-of-concept.\n        For more advanced layouts like Eidos or a full-fledged PicoCSS implementation,\n        you'll have to create your own layouts.\n    \"\"\"\n    body_tags = filter_body_tags(children)\n    head_tags = filter_head_tags(children)\n    if htmx:\n        head_tags.insert(\n            0,\n            Script(\n                src=\"https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js\",\n                integrity=\"sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm\",\n                crossorigin=\"anonymous\",\n            ),\n        )\n    return Html(\n        Head(\n            Link(\n                rel=\"stylesheet\",\n                href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\",\n            ),\n            *head_tags,\n        ),\n        Body(Main(*body_tags, class_=\"container\")),\n    ).render()\n</code></pre>"},{"location":"api/requests/","title":"Requests","text":""},{"location":"api/requests/#air.requests.is_htmx_request","title":"is_htmx_request","text":"<pre><code>is_htmx_request(hx_request=Header(default=None))\n</code></pre> <p>Dependency injection function used to determine if request is coming from HTMX. Checks if 'hx-request' header is in the HTTP request.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Whether or not a request is coming from an HTMX action.</p> <p>Example:</p> <pre><code>import air\n\napp = air.App()\n\n@app.get(\"/\")\ndef index(is_htmx: bool = Depends(air.is_htmx_request)):\n    return air.H1(f\"Is HTMX request: {is_htmx}\")\n</code></pre> Source code in <code>src/air/requests.py</code> <pre><code>def is_htmx_request(hx_request: str = Header(default=None)) -&gt; bool:\n    \"\"\"Dependency injection function used to determine if request is coming from HTMX. Checks if 'hx-request' header is in the HTTP request.\n\n    Returns:\n        bool: Whether or not a request is coming from an HTMX action.\n\n    Example:\n\n        import air\n\n        app = air.App()\n\n        @app.get(\"/\")\n        def index(is_htmx: bool = Depends(air.is_htmx_request)):\n            return air.H1(f\"Is HTMX request: {is_htmx}\")\n    \"\"\"\n    return hx_request is not None and hx_request.lower() == \"true\"\n</code></pre>"},{"location":"api/responses/","title":"Responses","text":""},{"location":"api/responses/#air.responses.AirResponse","title":"AirResponse","text":"<p>               Bases: <code>Response</code></p> <p>Response class to handle air.tags.Tags or HTML (from Jinja2).</p>"},{"location":"api/responses/#air.responses.AirResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> <p>Render Tag elements to bytes of HTML.</p> Source code in <code>src/air/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    \"\"\"Render Tag elements to bytes of HTML.\"\"\"\n    if isinstance(content, str):\n        return content.encode(\"utf-8\")\n    if isinstance(content, dict):\n        content = dict_to_airtag(content)\n    return content.render().encode(\"utf-8\")\n</code></pre>"},{"location":"api/responses/#air.responses.TagResponse","title":"TagResponse","text":"<p>               Bases: <code>Response</code></p> <p>Response class to handle air.tags.Tags.</p>"},{"location":"api/responses/#air.responses.TagResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> <p>Render Tag elements to bytes of HTML.</p> Source code in <code>src/air/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    \"\"\"Render Tag elements to bytes of HTML.\"\"\"\n    if isinstance(content, dict):\n        content = dict_to_airtag(content)\n    return content.render().encode(\"utf-8\")\n</code></pre>"},{"location":"api/svg/","title":"SVG","text":""},{"location":"api/svg/#air.svg.A","title":"A","text":"<pre><code>A(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines an SVG hyperlink</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Animate","title":"Animate","text":"<pre><code>Animate(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines animation on an SVG element</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.AnimateMotion","title":"AnimateMotion","text":"<pre><code>AnimateMotion(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines how an element moves along a motion path</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.AnimateTransform","title":"AnimateTransform","text":"<pre><code>AnimateTransform(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Animates transform attributes on an element</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Circle","title":"Circle","text":"<pre><code>Circle(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a circle</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.ClipPath","title":"ClipPath","text":"<pre><code>ClipPath(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a clipping path</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Defs","title":"Defs","text":"<pre><code>Defs(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines reusable objects</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Desc","title":"Desc","text":"<pre><code>Desc(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a description of an element</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Ellipse","title":"Ellipse","text":"<pre><code>Ellipse(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines an ellipse</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeBlend","title":"FeBlend","text":"<pre><code>FeBlend(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines image blending</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeColorMatrix","title":"FeColorMatrix","text":"<pre><code>FeColorMatrix(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Applies a matrix transformation on color values</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeComponentTransfer","title":"FeComponentTransfer","text":"<pre><code>FeComponentTransfer(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Performs component-wise remapping of data</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeComposite","title":"FeComposite","text":"<pre><code>FeComposite(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Performs image compositing</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeConvolveMatrix","title":"FeConvolveMatrix","text":"<pre><code>FeConvolveMatrix(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Applies a matrix convolution filter</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeDiffuseLighting","title":"FeDiffuseLighting","text":"<pre><code>FeDiffuseLighting(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Lights an image using diffuse lighting</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeDisplacementMap","title":"FeDisplacementMap","text":"<pre><code>FeDisplacementMap(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Displaces an image using another image</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeDistantLight","title":"FeDistantLight","text":"<pre><code>FeDistantLight(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a distant light source</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeDropShadow","title":"FeDropShadow","text":"<pre><code>FeDropShadow(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Creates a drop shadow effect</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeFlood","title":"FeFlood","text":"<pre><code>FeFlood(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Fills the filter region with a color</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeFuncA","title":"FeFuncA","text":"<pre><code>FeFuncA(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines the alpha transfer function</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeFuncB","title":"FeFuncB","text":"<pre><code>FeFuncB(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines the blue transfer function</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeFuncG","title":"FeFuncG","text":"<pre><code>FeFuncG(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines the green transfer function</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeFuncR","title":"FeFuncR","text":"<pre><code>FeFuncR(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines the red transfer function</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeGaussianBlur","title":"FeGaussianBlur","text":"<pre><code>FeGaussianBlur(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Applies Gaussian blur to an image</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeImage","title":"FeImage","text":"<pre><code>FeImage(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Refers to an external image</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeMerge","title":"FeMerge","text":"<pre><code>FeMerge(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Merges multiple filter nodes</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeMergeNode","title":"FeMergeNode","text":"<pre><code>FeMergeNode(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a node for feMerge</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeMorphology","title":"FeMorphology","text":"<pre><code>FeMorphology(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Applies morphological operations</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeOffset","title":"FeOffset","text":"<pre><code>FeOffset(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Offsets an image</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FePointLight","title":"FePointLight","text":"<pre><code>FePointLight(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a point light source</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeSpecularLighting","title":"FeSpecularLighting","text":"<pre><code>FeSpecularLighting(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Lights an image using specular lighting</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeSpotLight","title":"FeSpotLight","text":"<pre><code>FeSpotLight(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a spot light source</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeTile","title":"FeTile","text":"<pre><code>FeTile(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Tiles an image to fill a rectangle</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.FeTurbulence","title":"FeTurbulence","text":"<pre><code>FeTurbulence(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Creates turbulence noise</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Filter","title":"Filter","text":"<pre><code>Filter(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a filter effect</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.ForeignObject","title":"ForeignObject","text":"<pre><code>ForeignObject(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Allows inclusion of foreign XML</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.G","title":"G","text":"<pre><code>G(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Groups SVG elements</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Image","title":"Image","text":"<pre><code>Image(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Embeds an image</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Line","title":"Line","text":"<pre><code>Line(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a line</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.LinearGradient","title":"LinearGradient","text":"<pre><code>LinearGradient(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a linear gradient</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Marker","title":"Marker","text":"<pre><code>Marker(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a graphic for drawing on lines</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Mask","title":"Mask","text":"<pre><code>Mask(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a mask</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Metadata","title":"Metadata","text":"<pre><code>Metadata(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines metadata</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Mpath","title":"Mpath","text":"<pre><code>Mpath(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a motion path</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Path","title":"Path","text":"<pre><code>Path(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a path</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Pattern","title":"Pattern","text":"<pre><code>Pattern(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a pattern</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Polygon","title":"Polygon","text":"<pre><code>Polygon(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a polygon</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Polyline","title":"Polyline","text":"<pre><code>Polyline(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a polyline</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.RadialGradient","title":"RadialGradient","text":"<pre><code>RadialGradient(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a radial gradient</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Rect","title":"Rect","text":"<pre><code>Rect(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a rectangle</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Script","title":"Script","text":"<pre><code>Script(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a script</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Set","title":"Set","text":"<pre><code>Set(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Sets an attribute value</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Stop","title":"Stop","text":"<pre><code>Stop(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a gradient stop</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Style","title":"Style","text":"<pre><code>Style(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines style information</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Svg","title":"Svg","text":"<pre><code>Svg(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines an SVG document fragment</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Switch","title":"Switch","text":"<pre><code>Switch(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines conditional processing</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Symbol","title":"Symbol","text":"<pre><code>Symbol(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a reusable symbol</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Text","title":"Text","text":"<pre><code>Text(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines text content</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.TextPath","title":"TextPath","text":"<pre><code>TextPath(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines text along a path</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Title","title":"Title","text":"<pre><code>Title(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a title for the SVG document</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Tspan","title":"Tspan","text":"<pre><code>Tspan(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a text span</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.Use","title":"Use","text":"<pre><code>Use(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>References another element</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/#air.svg.View","title":"View","text":"<pre><code>View(*children, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a view</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/templates/","title":"Templates","text":""},{"location":"api/templates/#air.templates.JinjaRenderer","title":"JinjaRenderer","text":"<pre><code>JinjaRenderer(directory)\n</code></pre> <p>Template renderer to make Jinja easier in Air.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Template directory</p> required Example Source code in <code>src/air/templates.py</code> <pre><code>def __init__(self, directory: str):\n    \"\"\"Initialize with template directory path\"\"\"\n    self.templates = Jinja2Templates(directory=directory)\n</code></pre>"},{"location":"api/templates/#air.templates.JinjaRenderer--instantiate-the-render-callable","title":"Instantiate the render callable","text":"<p>jinja = JinjaRenderer('templates')</p>"},{"location":"api/templates/#air.templates.JinjaRenderer--use-for-returning-jinja-from-views","title":"Use for returning Jinja from views","text":"<p>@app.get('/') async def home(request: Request):     return jinja(         request,         'home.html',         context={'id': 5}      )</p> <p># Can also pass in kwargs, which will be added to the context:     return jinja(         request,         'home.html',         name='Parmesan'     )</p>"},{"location":"api/templates/#air.templates.JinjaRenderer.__call__","title":"__call__","text":"<pre><code>__call__(request, name, context=None, **kwargs)\n</code></pre> <p>Render template with request and context. If an Air Tag is found in the context, try to render it.</p> Source code in <code>src/air/templates.py</code> <pre><code>def __call__(\n    self,\n    request: Request,\n    name: str,\n    context: dict[Any, Any] | None = None,\n    **kwargs,\n):\n    \"\"\"Render template with request and context. If an Air Tag\n    is found in the context, try to render it.\n    \"\"\"\n    if context is None:\n        context = {}\n    if kwargs:\n        context = context | kwargs\n\n    # Attempt to render any Tags in the contect\n    for k, v in context.items():\n        if isinstance(v, Tag) and hasattr(v, \"render\"):\n            context[k] = v.render()\n    return self.templates.TemplateResponse(\n        request=request, name=name, context=context\n    )\n</code></pre>"},{"location":"api/tags/","title":"Tags","text":""},{"location":"api/tags/#tags_1","title":"Tags","text":"<p>Note</p> <p>Tags, or Air Tag, are explained in the [concepts document about tags][air-tags].</p> <p>In the spirit of helping our users, every Air Tag has copious documentation\u2014enough that sometimes it breaks the documentation build process. Therefore, Air Tag that directly correspond to their HTML equivalents can be found in smaller, easier-to-compile pages.</p> <ul> <li>HTML Air Tags A-D</li> <li>HTML Air Tags E-M</li> <li>HTML Air Tags N-S</li> <li>HTML Air Tags T-Z</li> </ul> <p>What remains on this page are core Air Tag that either have great utility (Raw and Children come to mind), or are base classes for other tags.</p> <p>Easy to write and performant HTML content generation using Python classes to render HTML.</p>"},{"location":"api/tags/#air.tags.Tag","title":"Tag","text":"<pre><code>Tag(*children, **kwargs)\n</code></pre> <p>Base tag for all other tags.</p> <p>Sets four attributes, name, module, children, and attrs. These are important for Starlette view responses, as nested objects get auto-serialized to JSON and need to be rebuilt. With the values of these attributes, the object reconstruction can occur.</p> <pre><code>kwargs: Keyword arguments transformed into tag attributes.\n</code></pre> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/tags/#air.tags.Raw","title":"Raw","text":"<pre><code>Raw(*args, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Renders raw HTML content without escaping.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Any</code> <p>A single string containing raw text to render</p> <code>()</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If non-string content is provided</p> <code>ValueError</code> <p>If multiple arguments are provided</p> <p>Example:</p> <pre><code># Produces '&lt;strong&gt;Bold&lt;/strong&gt; text'\nRaw('&lt;strong&gt;Bold&lt;/strong&gt; text')\n\n# Use with other tags\nDiv(\n    P(\"Safe content\"),\n    Raw('&lt;hr class=\"divider\"&gt;'),\n    P(\"More safe content\")\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Should be exactly one string argument</p> <code>()</code> <code>**kwargs</code> <code>str | int | float | bool</code> <p>Ignored (for consistency with Tag interface)</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: str | int | float | bool):\n    \"\"\"Initialize Raw with a single string argument.\n\n    Args:\n        *args: Should be exactly one string argument\n        **kwargs: Ignored (for consistency with Tag interface)\n    \"\"\"\n    if len(args) &gt; 1:\n        raise ValueError(\"Raw accepts only one string argument\")\n\n    raw_string: str = args[0] if args else \"\"\n\n    if not isinstance(raw_string, str):\n        raise TypeError(\"Raw only accepts string content\")\n\n    super().__init__(raw_string)\n</code></pre>"},{"location":"api/tags/#air.tags.Raw.render","title":"render","text":"<pre><code>render()\n</code></pre> <p>Render the string without escaping.</p> Source code in <code>src/air/tags.py</code> <pre><code>def render(self) -&gt; str:\n    \"\"\"Render the string without escaping.\"\"\"\n    return self._children[0] if self._children else \"\"\n</code></pre>"},{"location":"api/tags/#air.tags.Children","title":"Children","text":"<pre><code>Children(*children, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/tags/#air.tags.CaseTag","title":"CaseTag","text":"<pre><code>CaseTag(*children, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>This is for case-sensitive tags like those used in SVG generation.</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/tags/#air.tags.NoEscapeTag","title":"NoEscapeTag","text":"<pre><code>NoEscapeTag(*children, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Custom tag that does not escape its children.</p> <p>This is used for tags like Script and Style where content should not be HTML-escaped.</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/tags/#air.tags.NoEscapeTag.render","title":"render","text":"<pre><code>render()\n</code></pre> <p>Render the tag with unescaped content.</p> Source code in <code>src/air/tags.py</code> <pre><code>def render(self) -&gt; str:\n    \"\"\"Render the tag with unescaped content.\"\"\"\n    content = self._children[0] if self._children else \"\"\n    return f\"&lt;{self.name}{self.attrs}&gt;{content}&lt;/{self.name}&gt;\"\n</code></pre>"},{"location":"api/tags/#air.tags.SafeStr","title":"SafeStr","text":"<p>               Bases: <code>str</code></p> <p>A string subclass that doesn't trigger html.escape() when called by Tag.render()</p> Example <p>sample = SafeStr('Hello, world')</p>"},{"location":"api/tags/a-d/","title":"Tags A-D","text":""},{"location":"api/tags/a-d/#tags-a-d_1","title":"Tags A-D","text":"<p>Easy to write and performant HTML content generation using Python classes to render HTML.</p>"},{"location":"api/tags/a-d/#air.tags.A","title":"A","text":"<pre><code>A(*children, href=None, target=None, download=None, rel=None, hreflang=None, type=None, referrerpolicy=None, media=None, ping=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a hyperlink</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>href</code> <code>str | None</code> <p>Specifies the URL of the page the link goes to.</p> <code>None</code> <code>target</code> <code>str | None</code> <p>Specifies where to open the linked document.</p> <code>None</code> <code>download</code> <code>str | None</code> <p>Specifies that the target will be downloaded when a user clicks on the hyperlink.</p> <code>None</code> <code>rel</code> <code>str | None</code> <p>Specifies the relationship between the current document and the linked document.</p> <code>None</code> <code>hreflang</code> <code>str | None</code> <p>Specifies the language of the linked document.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Specifies the media type of the linked document.</p> <code>None</code> <code>referrerpolicy</code> <code>str | None</code> <p>Specifies which referrer information to send with the link.</p> <code>None</code> <code>media</code> <code>str | None</code> <p>Specifies what media/device the linked document is optimized for.</p> <code>None</code> <code>ping</code> <code>str | None</code> <p>Specifies a space-separated list of URLs to which, when the link is followed, post requests with the body ping will be sent by the browser (in the background). Typically used for tracking.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    href: str | None = None,\n    target: str | None = None,\n    download: str | None = None,\n    rel: str | None = None,\n    hreflang: str | None = None,\n    type: str | None = None,\n    referrerpolicy: str | None = None,\n    media: str | None = None,\n    ping: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Area","title":"Area","text":"<pre><code>Area(*children, alt=None, coords=None, download=None, href=None, ping=None, referrerpolicy=None, rel=None, shape=None, target=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines an area inside an image map</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>alt</code> <code>str | None</code> <p>Specifies an alternate text for an area. Required if the href attribute is present.</p> <code>None</code> <code>coords</code> <code>str | None</code> <p>Specifies the coordinates of an area.</p> <code>None</code> <code>download</code> <code>str | None</code> <p>Specifies that the target will be downloaded when a user clicks on the hyperlink.</p> <code>None</code> <code>href</code> <code>str | None</code> <p>Specifies the URL of the page the link goes to.</p> <code>None</code> <code>ping</code> <code>str | None</code> <p>Specifies a space-separated list of URLs to which, when the link is followed, post requests with the body ping will be sent by the browser (in the background). Typically used for tracking.</p> <code>None</code> <code>referrerpolicy</code> <code>str | None</code> <p>Specifies which referrer information to send with the link.</p> <code>None</code> <code>rel</code> <code>str | None</code> <p>Specifies the relationship between the current document and the linked document.</p> <code>None</code> <code>shape</code> <code>str | None</code> <p>Specifies the shape of an area.</p> <code>None</code> <code>target</code> <code>str | None</code> <p>Specifies where to open the linked document.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    alt: str | None = None,\n    coords: str | None = None,\n    download: str | None = None,\n    href: str | None = None,\n    ping: str | None = None,\n    referrerpolicy: str | None = None,\n    rel: str | None = None,\n    shape: str | None = None,\n    target: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n    self.self_closing = True\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Audio","title":"Audio","text":"<pre><code>Audio(*children, autoplay=None, controls=None, loop=None, muted=None, preload=None, src=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines embedded sound content</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>autoplay</code> <code>str | None</code> <p>Specifies that the audio will start playing as soon as it is ready.</p> <code>None</code> <code>controls</code> <code>str | None</code> <p>Specifies that audio controls should be displayed (such as a play/pause button etc).</p> <code>None</code> <code>loop</code> <code>str | None</code> <p>Specifies that the audio will start over again, every time it is finished.</p> <code>None</code> <code>muted</code> <code>str | None</code> <p>Specifies that the audio output should be muted.</p> <code>None</code> <code>preload</code> <code>str | None</code> <p>Specifies if and how the author thinks the audio should be loaded when the page loads.</p> <code>None</code> <code>src</code> <code>str | None</code> <p>Specifies the URL of the audio file.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    autoplay: str | None = None,\n    controls: str | None = None,\n    loop: str | None = None,\n    muted: str | None = None,\n    preload: str | None = None,\n    src: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Base","title":"Base","text":"<pre><code>Base(*children, href=None, target=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Specifies the base URL/target for all relative URLs in a document</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    href: str | None = None,\n    target: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n    self.self_closing = True\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Bdi","title":"Bdi","text":"<pre><code>Bdi(*children, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Isolates a part of text that might be formatted in a different direction from other text outside it</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Blockquote","title":"Blockquote","text":"<pre><code>Blockquote(*children, cite=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a section that is quoted from another source</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>cite</code> <code>str | None</code> <p>Specifies the source of the quotation.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cite: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Button","title":"Button","text":"<pre><code>Button(*children, name=None, type=None, value=None, autofocus=None, disabled=None, form=None, formaction=None, formenctype=None, formmethod=None, formnovalidate=None, formtarget=None, popovertarget=None, popovertargetaction=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a clickable button</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>name</code> <code>str | None</code> <p>Specifies a name for the button.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Specifies the type of button.</p> <code>None</code> <code>value</code> <code>str | None</code> <p>Specifies an initial value for the button.</p> <code>None</code> <code>autofocus</code> <code>str | None</code> <p>Specifies that a button should automatically get focus when the page loads.</p> <code>None</code> <code>disabled</code> <code>str | None</code> <p>Specifies that a button should be disabled.</p> <code>None</code> <code>form</code> <code>str | None</code> <p>Specifies which form the button belongs to.</p> <code>None</code> <code>formaction</code> <code>str | None</code> <p>Specifies where to send the form-data when a form is submitted. Only for type=\"submit\".</p> <code>None</code> <code>formenctype</code> <code>str | None</code> <p>Specifies how the form-data should be encoded before sending it to a server. Only for type=\"submit\".</p> <code>None</code> <code>formmethod</code> <code>str | None</code> <p>Specifies how to send the form-data (which HTTP method to use). Only for type=\"submit\".</p> <code>None</code> <code>formnovalidate</code> <code>str | None</code> <p>Specifies that the form-data should not be validated on submission. Only for type=\"submit\".</p> <code>None</code> <code>formtarget</code> <code>str | None</code> <p>Specifies where to display the response that is received after submitting the form. Only for type=\"submit\".</p> <code>None</code> <code>popovertarget</code> <code>str | None</code> <p>Specifies which popover element to invoke.</p> <code>None</code> <code>popovertargetaction</code> <code>str | None</code> <p>Specifies what action to perform on the popover element.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    name: str | None = None,\n    type: str | None = None,\n    value: str | None = None,\n    autofocus: str | None = None,\n    disabled: str | None = None,\n    form: str | None = None,\n    formaction: str | None = None,\n    formenctype: str | None = None,\n    formmethod: str | None = None,\n    formnovalidate: str | None = None,\n    formtarget: str | None = None,\n    popovertarget: str | None = None,\n    popovertargetaction: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Canvas","title":"Canvas","text":"<pre><code>Canvas(*children, width=None, height=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Used to draw graphics, on the fly, via scripting (usually JavaScript)</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>width</code> <code>str | int | None</code> <p>Specifies the width of the canvas.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>Specifies the height of the canvas.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    width: str | int | None = None,\n    height: str | int | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Col","title":"Col","text":"<pre><code>Col(*children, span=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Specifies column properties for each column within a  element <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>span</code> <code>str | None</code> <p>Specifies the number of columns a  element should span.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    span: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n    self.self_closing = True\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Colgroup","title":"Colgroup","text":"<pre><code>Colgroup(*children, span=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Specifies a group of one or more columns in a table for formatting</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>span</code> <code>str | None</code> <p>Specifies the number of columns a  element should span. <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    span: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Data","title":"Data","text":"<pre><code>Data(*children, value=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Adds a machine-readable translation of a given content</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>value</code> <code>str | None</code> <p>Specifies the machine-readable translation of the content.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    value: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Dd","title":"Dd","text":"<pre><code>Dd(*children, cite=None, datetime=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a description/value of a term in a description list</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>cite</code> <code>str | None</code> <p>Specifies the source of the quotation.</p> <code>None</code> <code>datetime</code> <code>str | None</code> <p>Specifies the date and time of the quotation.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cite: str | None = None,\n    datetime: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Details","title":"Details","text":"<pre><code>Details(*children, open=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines additional details that the user can view or hide</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>open</code> <code>str | None</code> <p>Specifies that the details should be visible (open) to the user.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    open: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/a-d/#air.tags.Dialog","title":"Dialog","text":"<pre><code>Dialog(*children, open=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a dialog box or window</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>open</code> <code>str | None</code> <p>Specifies that the dialog box should be visible (open) to the user.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    open: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/e-m/","title":"Tags E-M","text":""},{"location":"api/tags/e-m/#tags-e-m_1","title":"Tags E-M","text":"<p>Easy to write and performant HTML content generation using Python classes to render HTML.</p>"},{"location":"api/tags/e-m/#air.tags.Embed","title":"Embed","text":"<pre><code>Embed(*children, src=None, type=None, width=None, height=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a container for an external application</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>src</code> <code>str | None</code> <p>Specifies the address of the external file to embed.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Specifies the media type of the embedded content.</p> <code>None</code> <code>width</code> <code>str | int | None</code> <p>Specifies the width of the embedded content.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>Specifies the height of the embedded content.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    src: str | None = None,\n    type: str | None = None,\n    width: str | int | None = None,\n    height: str | int | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n    self.self_closing = True\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Fieldset","title":"Fieldset","text":"<pre><code>Fieldset(*children, disabled=None, form=None, name=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Groups related elements in a form</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>disabled</code> <code>str | None</code> <p>Specifies that a group of related form elements should be disabled.</p> <code>None</code> <code>form</code> <code>str | None</code> <p>Specifies which form the fieldset belongs to.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Specifies a name for the fieldset.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    disabled: str | None = None,\n    form: str | None = None,\n    name: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Form","title":"Form","text":"<pre><code>Form(*children, action=None, method=None, accept_charset=None, autocomplete=None, enctype=None, name=None, novalidate=None, rel=None, target=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines an HTML form for user input</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>action</code> <code>str | None</code> <p>Specifies where to send the form-data when a form is submitted.</p> <code>None</code> <code>method</code> <code>str | None</code> <p>Specifies the HTTP method to use when sending form-data.</p> <code>None</code> <code>accept_charset</code> <code>str | None</code> <p>Specifies the character encodings that are to be used for the form submission.</p> <code>None</code> <code>autocomplete</code> <code>str | None</code> <p>Specifies whether a form should have autocomplete on or off.</p> <code>None</code> <code>enctype</code> <code>str | None</code> <p>Specifies how the form-data should be encoded when submitting it to the server.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Specifies the name of the form.</p> <code>None</code> <code>novalidate</code> <code>str | None</code> <p>Specifies that the form should not be validated when submitted.</p> <code>None</code> <code>rel</code> <code>str | None</code> <p>Specifies the relationship between a linked resource and the current document.</p> <code>None</code> <code>target</code> <code>str | None</code> <p>Specifies where to display the response that is received after submitting the form.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    action: str | None = None,\n    method: str | None = None,\n    accept_charset: str | None = None,\n    autocomplete: str | None = None,\n    enctype: str | None = None,\n    name: str | None = None,\n    novalidate: str | None = None,\n    rel: str | None = None,\n    target: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Head","title":"Head","text":"<pre><code>Head(*children, profile=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Contains metadata/information for the document</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>profile</code> <code>str | None</code> <p>Specifies the URL of a document that contains a line-break-separated list of links.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    profile: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Html","title":"Html","text":"<pre><code>Html(*children, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines the root of an HTML document</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Iframe","title":"Iframe","text":"<pre><code>Iframe(*children, src=None, srcdoc=None, width=None, height=None, allow=None, allowfullscreen=None, allowpaymentrequest=None, loading=None, name=None, referrerpolicy=None, sandbox=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines an inline frame</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>src</code> <code>str | None</code> <p>Specifies the URL of the page to embed.</p> <code>None</code> <code>srcdoc</code> <code>str | None</code> <p>Specifies the HTML content of the page to show in the . <code>None</code> <code>width</code> <code>str | int | None</code> <p>Specifies the width of an . <code>None</code> <code>height</code> <code>str | int | None</code> <p>Specifies the height of an . <code>None</code> <code>allow</code> <code>str | None</code> <p>Specifies a feature policy for the . <code>None</code> <code>allowfullscreen</code> <code>str | None</code> <p>Set to true if the  can activate fullscreen mode. <code>None</code> <code>allowpaymentrequest</code> <code>str | None</code> <p>Set to true if a cross-origin  should be allowed to invoke the Payment Request API. <code>None</code> <code>loading</code> <code>str | None</code> <p>Specifies the loading policy of the . <code>None</code> <code>name</code> <code>str | None</code> <p>Specifies the name of an . <code>None</code> <code>referrerpolicy</code> <code>str | None</code> <p>Specifies which referrer information to send when fetching the iframe's content.</p> <code>None</code> <code>sandbox</code> <code>str | None</code> <p>Enables an extra set of restrictions for the content in an . <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    src: str | None = None,\n    srcdoc: str | None = None,\n    width: str | int | None = None,\n    height: str | int | None = None,\n    allow: str | None = None,\n    allowfullscreen: str | None = None,\n    allowpaymentrequest: str | None = None,\n    loading: str | None = None,\n    name: str | None = None,\n    referrerpolicy: str | None = None,\n    sandbox: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Img","title":"Img","text":"<pre><code>Img(*children, src=None, width=None, height=None, srcset=None, alt=None, crossorigin=None, ismap=None, loading=None, longdesc=None, referrerpolicy=None, sizes=None, usemap=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines an image</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>src</code> <code>str | None</code> <p>Specifies the path to the image.</p> <code>None</code> <code>width</code> <code>str | int | None</code> <p>Specifies the width of an image.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>Specifies the height of an image.</p> <code>None</code> <code>srcset</code> <code>str | None</code> <p>Specifies a list of image files to use in different situations.</p> <code>None</code> <code>alt</code> <code>str | None</code> <p>Specifies an alternate text for an image.</p> <code>None</code> <code>crossorigin</code> <code>str | None</code> <p>Allows images from third-party sites that allow cross-origin access to be used with canvas.</p> <code>None</code> <code>ismap</code> <code>str | None</code> <p>Specifies an image as a server-side image map.</p> <code>None</code> <code>loading</code> <code>str | None</code> <p>Specifies whether a browser should load an image immediately or to defer loading of off-screen images.</p> <code>None</code> <code>longdesc</code> <code>str | None</code> <p>Specifies a URL to a detailed description of an image.</p> <code>None</code> <code>referrerpolicy</code> <code>str | None</code> <p>Specifies which referrer information to use when fetching an image.</p> <code>None</code> <code>sizes</code> <code>str | None</code> <p>Specifies image sizes for different page layouts.</p> <code>None</code> <code>usemap</code> <code>str | None</code> <p>Specifies an image as a client-side image map.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    src: str | None = None,\n    width: str | int | None = None,\n    height: str | int | None = None,\n    srcset: str | None = None,\n    alt: str | None = None,\n    crossorigin: str | None = None,\n    ismap: str | None = None,\n    loading: str | None = None,\n    longdesc: str | None = None,\n    referrerpolicy: str | None = None,\n    sizes: str | None = None,\n    usemap: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n    self.self_closing = True\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Input","title":"Input","text":"<pre><code>Input(*children, name=None, type=None, value=None, readonly=None, required=None, accept=None, alt=None, autocomplete=None, autofocus=None, checked=None, dirname=None, disabled=None, form=None, formaction=None, formenctype=None, formmethod=None, formnovalidate=None, formtarget=None, height=None, list=None, max=None, maxlength=None, min=None, minlength=None, multiple=None, pattern=None, placeholder=None, popovertarget=None, popovertargetaction=None, size=None, src=None, step=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines an input control</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>name</code> <code>str | None</code> <p>Specifies the name of an  element.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Specifies the type  element to display.</p> <code>None</code> <code>value</code> <code>str | None</code> <p>Specifies the value of an  element.</p> <code>None</code> <code>readonly</code> <code>str | None</code> <p>Specifies that an input field is read-only.</p> <code>None</code> <code>required</code> <code>str | None</code> <p>Specifies that an input field must be filled out before submitting the form.</p> <code>None</code> <code>accept</code> <code>str | None</code> <p>Specifies a filter for what file types the user can pick from the file input dialog box.</p> <code>None</code> <code>alt</code> <code>str | None</code> <p>Specifies an alternate text for images.</p> <code>None</code> <code>autocomplete</code> <code>str | None</code> <p>Specifies whether an  element should have autocomplete on or off.</p> <code>None</code> <code>autofocus</code> <code>str | None</code> <p>Specifies that an  element should automatically get focus when the page loads.</p> <code>None</code> <code>checked</code> <code>str | None</code> <p>Specifies that an  element should be pre-selected when the page loads.</p> <code>None</code> <code>dirname</code> <code>str | None</code> <p>Specifies that the text direction of the input field will be submitted.</p> <code>None</code> <code>disabled</code> <code>str | None</code> <p>Specifies that an  element should be disabled.</p> <code>None</code> <code>form</code> <code>str | None</code> <p>Specifies the form the  element belongs to.</p> <code>None</code> <code>formaction</code> <code>str | None</code> <p>Specifies the URL of the file that will process the input control when the form is submitted.</p> <code>None</code> <code>formenctype</code> <code>str | None</code> <p>Specifies how the form-data should be encoded when submitting it to the server.</p> <code>None</code> <code>formmethod</code> <code>str | None</code> <p>Defines the HTTP method for sending data to the action URL.</p> <code>None</code> <code>formnovalidate</code> <code>str | None</code> <p>Specifies that the form-data should not be validated on submission.</p> <code>None</code> <code>formtarget</code> <code>str | None</code> <p>Specifies where to display the response that is received after submitting the form.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>Specifies the height of an  element.</p> <code>None</code> <code>list</code> <code>str | None</code> <p>Refers to a  element that contains pre-defined options for an  element. <code>None</code> <code>max</code> <code>str | None</code> <p>Specifies the maximum value for an  element.</p> <code>None</code> <code>maxlength</code> <code>str | None</code> <p>Specifies the maximum number of characters allowed in an  element.</p> <code>None</code> <code>min</code> <code>str | None</code> <p>Specifies a minimum value for an  element.</p> <code>None</code> <code>minlength</code> <code>str | None</code> <p>Specifies the minimum number of characters required in an  element.</p> <code>None</code> <code>multiple</code> <code>str | None</code> <p>Specifies that a user can enter more than one value in an  element.</p> <code>None</code> <code>pattern</code> <code>str | None</code> <p>Specifies a regular expression that an  element's value is checked against.</p> <code>None</code> <code>placeholder</code> <code>str | None</code> <p>Specifies a short hint that describes the expected value of an  element.</p> <code>None</code> <code>popovertarget</code> <code>str | None</code> <p>Specifies which popover element to invoke.</p> <code>None</code> <code>popovertargetaction</code> <code>str | None</code> <p>Specifies what action to perform on the popover element.</p> <code>None</code> <code>size</code> <code>str | None</code> <p>Specifies the width, in characters, of an  element.</p> <code>None</code> <code>src</code> <code>str | None</code> <p>Specifies the URL of the image to use as a submit button.</p> <code>None</code> <code>step</code> <code>str | None</code> <p>Specifies the legal number intervals for an input field.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    name: str | None = None,\n    type: str | None = None,\n    value: str | None = None,\n    readonly: str | None = None,\n    required: str | None = None,\n    accept: str | None = None,\n    alt: str | None = None,\n    autocomplete: str | None = None,\n    autofocus: str | None = None,\n    checked: str | None = None,\n    dirname: str | None = None,\n    disabled: str | None = None,\n    form: str | None = None,\n    formaction: str | None = None,\n    formenctype: str | None = None,\n    formmethod: str | None = None,\n    formnovalidate: str | None = None,\n    formtarget: str | None = None,\n    height: str | int | None = None,\n    list: str | None = None,\n    max: str | None = None,\n    maxlength: str | None = None,\n    min: str | None = None,\n    minlength: str | None = None,\n    multiple: str | None = None,\n    pattern: str | None = None,\n    placeholder: str | None = None,\n    popovertarget: str | None = None,\n    popovertargetaction: str | None = None,\n    size: str | None = None,\n    src: str | None = None,\n    step: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n    self.self_closing = True\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Ins","title":"Ins","text":"<pre><code>Ins(*children, cite=None, datetime=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a text that has been inserted into a document</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>cite</code> <code>str | None</code> <p>Specifies a URL to a document that explains the reason why the text was inserted/changed.</p> <code>None</code> <code>datetime</code> <code>str | None</code> <p>Specifies the date and time when the text was inserted/changed.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cite: str | None = None,\n    datetime: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Map","title":"Map","text":"<pre><code>Map(*children, name=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines an image map</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>name</code> <code>str | None</code> <p>Specifies the name of the image map.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    name: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Menu","title":"Menu","text":"<pre><code>Menu(*children, compact=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a menu list</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>compact</code> <code>str | None</code> <p>Specifies that the list should be displayed in a compact style.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    compact: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Meta","title":"Meta","text":"<pre><code>Meta(*children, charset=None, content=None, http_equiv=None, media=None, name=None, class_=None, id=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines metadata about an HTML document</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>charset</code> <code>str | None</code> <p>Specifies the character encoding for the HTML document.</p> <code>None</code> <code>content</code> <code>str | None</code> <p>Specifies the value associated with the http-equiv or name attribute.</p> <code>None</code> <code>http_equiv</code> <code>str | None</code> <p>Provides an HTTP header for the information/value of the content attribute.</p> <code>None</code> <code>media</code> <code>str | None</code> <p>Specifies what media/device the linked document is optimized for.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Specifies a name for the metadata.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <p>Inline style attribute.</p> required <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    charset: str | None = None,\n    content: str | None = None,\n    http_equiv: str | None = None,\n    media: str | None = None,\n    name: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n    self.self_closing = True\n</code></pre>"},{"location":"api/tags/e-m/#air.tags.Meter","title":"Meter","text":"<pre><code>Meter(*children, value=None, min=None, max=None, low=None, high=None, optimum=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a scalar measurement within a known range (a gauge)</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>value</code> <code>str | None</code> <p>The current numeric value. Must be between the min and max values.</p> <code>None</code> <code>min</code> <code>str | None</code> <p>The lower bound of the measured range.</p> <code>None</code> <code>max</code> <code>str | None</code> <p>The upper bound of the measured range.</p> <code>None</code> <code>low</code> <code>str | None</code> <p>The upper numeric bound of the low end of the measured range.</p> <code>None</code> <code>high</code> <code>str | None</code> <p>The lower numeric bound of the high end of the measured range.</p> <code>None</code> <code>optimum</code> <code>str | None</code> <p>The optimal numeric value.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    value: str | None = None,\n    min: str | None = None,\n    max: str | None = None,\n    low: str | None = None,\n    high: str | None = None,\n    optimum: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/","title":"Tags N-S","text":""},{"location":"api/tags/n-s/#tags-n-s_1","title":"Tags N-S","text":"<p>Easy to write and performant HTML content generation using Python classes to render HTML.</p>"},{"location":"api/tags/n-s/#air.tags.Object","title":"Object","text":"<pre><code>Object(*children, archive=None, border=None, classid=None, codebase=None, codetype=None, data=None, declare=None, form=None, height=None, name=None, standby=None, type=None, usemap=None, width=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines an embedded object</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>archive</code> <code>str | None</code> <p>A space-separated list of URIs for archives of resources for the object.</p> <code>None</code> <code>border</code> <code>str | None</code> <p>The width of a border around the object.</p> <code>None</code> <code>classidcodebase</code> <p>The codebase URL for the object.</p> required <code>codetype</code> <code>str | None</code> <p>The content type of the code.</p> <code>None</code> <code>data</code> <code>str | None</code> <p>The address of the object's data.</p> <code>None</code> <code>declare</code> <code>str | None</code> <p>Declares the object without instantiating it.</p> <code>None</code> <code>form</code> <code>str | None</code> <p>The form the object belongs to.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>The height of the object.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>The name of the object.</p> <code>None</code> <code>standby</code> <code>str | None</code> <p>A message to display while the object is loading.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>The content type of the data.</p> <code>None</code> <code>usemap</code> <code>str | None</code> <p>The name of a client-side image map to be used with the object.</p> <code>None</code> <code>width</code> <code>str | int | None</code> <p>The width of the object.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    archive: str | None = None,\n    border: str | None = None,\n    classid: str | None = None,\n    codebase: str | None = None,\n    codetype: str | None = None,\n    data: str | None = None,\n    declare: str | None = None,\n    form: str | None = None,\n    height: str | int | None = None,\n    name: str | None = None,\n    standby: str | None = None,\n    type: str | None = None,\n    usemap: str | None = None,\n    width: str | int | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Ol","title":"Ol","text":"<pre><code>Ol(*children, compact=None, reversed=None, start=None, type=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines an ordered list</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>compact</code> <code>str | None</code> <p>Specifies that the list should be rendered in a compact style.</p> <code>None</code> <code>reversed</code> <code>str | None</code> <p>Specifies that the list order should be descending.</p> <code>None</code> <code>start</code> <code>str | None</code> <p>Specifies the start value of an ordered list.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Specifies the kind of marker to use in the list.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>str | float | int | bool</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    compact: str | None = None,\n    reversed: str | None = None,\n    start: str | None = None,\n    type: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Optgroup","title":"Optgroup","text":"<pre><code>Optgroup(*children, disabled=None, label=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a group of related options in a drop-down list</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    disabled: str | None = None,\n    label: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Option","title":"Option","text":"<pre><code>Option(*children, disabled=None, label=None, selected=None, value=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines an option in a drop-down list</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    disabled: str | None = None,\n    label: str | None = None,\n    selected: bool | None = None,\n    value: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Output","title":"Output","text":"<pre><code>Output(*children, for_=None, form=None, name=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines the result of a calculation</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    for_: str | None = None,\n    form: str | None = None,\n    name: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Pre","title":"Pre","text":"<pre><code>Pre(*children, width=None, wrap=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines preformatted text</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    width: str | int | None = None,\n    wrap: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Progress","title":"Progress","text":"<pre><code>Progress(*children, max=None, value=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Represents the progress of a task</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    max: str | None = None,\n    value: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Q","title":"Q","text":"<pre><code>Q(*children, cite=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a short quotation</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cite: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Script","title":"Script","text":"<pre><code>Script(*children, **kwargs)\n</code></pre> <p>               Bases: <code>NoEscapeTag</code></p> <p>Defines a client-side script</p> <p>Warning: Script tag does not protect against code injection.</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Select","title":"Select","text":"<pre><code>Select(*children, autocomplete=None, autofocus=None, disabled=None, form=None, multiple=None, name=None, required=None, size=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a drop-down list</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    autocomplete: str | None = None,\n    autofocus: str | None = None,\n    disabled: str | None = None,\n    form: str | None = None,\n    multiple: str | None = None,\n    name: str | None = None,\n    required: str | None = None,\n    size: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Source","title":"Source","text":"<pre><code>Source(*children, src=None, type=None, sizes=None, media=None, srcset=None, height=None, width=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines multiple media resources for media elements ( and ) Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    src: str | None = None,\n    type: str | None = None,\n    sizes: str | None = None,\n    media: str | None = None,\n    srcset: str | None = None,\n    height: str | int | None = None,\n    width: str | int | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/n-s/#air.tags.Style","title":"Style","text":"<pre><code>Style(*children, **kwargs)\n</code></pre> <p>               Bases: <code>NoEscapeTag</code></p> <p>Defines style information for a document</p> <p>Warning: Style tag does not protect against code injection.</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: str | int | float | bool):\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/tags/t-z/","title":"Tags T-Z","text":""},{"location":"api/tags/t-z/#tags-t-z_1","title":"Tags T-Z","text":"<p>Easy to write and performant HTML content generation using Python classes to render HTML.</p>"},{"location":"api/tags/t-z/#air.tags.Td","title":"Td","text":"<pre><code>Td(*children, colspan=None, rowspan=None, headers=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a cell in a table</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    colspan: str | None = None,\n    rowspan: str | None = None,\n    headers: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/t-z/#air.tags.Template","title":"Template","text":"<pre><code>Template(*children, shadowrootmode=None, shadowrootdelegatesfocus=None, shadowrootclonable=None, shadowrootserializable=None, class_=None, id=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a container for content that should be hidden when the page loads</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    shadowrootmode: str | None = None,\n    shadowrootdelegatesfocus: str | None = None,\n    shadowrootclonable: str | None = None,\n    shadowrootserializable: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/t-z/#air.tags.Textarea","title":"Textarea","text":"<pre><code>Textarea(*children, autocapitalize=None, autocomplete=None, autocorrect=None, autofocus=None, cols=None, dirname=None, disabled=None, form=None, maxlength=None, minlength=None, name=None, placeholder=None, readonly=None, required=None, rows=None, spellcheck=None, wrap=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a multiline input control (text area)</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    autocapitalize: str | None = None,\n    autocomplete: str | None = None,\n    autocorrect: str | None = None,\n    autofocus: str | None = None,\n    cols: str | None = None,\n    dirname: str | None = None,\n    disabled: str | None = None,\n    form: str | None = None,\n    maxlength: str | None = None,\n    minlength: str | None = None,\n    name: str | None = None,\n    placeholder: str | None = None,\n    readonly: str | None = None,\n    required: str | None = None,\n    rows: str | None = None,\n    spellcheck: str | None = None,\n    wrap: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/t-z/#air.tags.Th","title":"Th","text":"<pre><code>Th(*children, abbr=None, colspan=None, headers=None, rowspan=None, scope=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a header cell in a table</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    abbr: str | None = None,\n    colspan: str | None = None,\n    headers: str | None = None,\n    rowspan: str | None = None,\n    scope: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/t-z/#air.tags.Time","title":"Time","text":"<pre><code>Time(*children, datetime=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines a specific time (or datetime)</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    datetime: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/t-z/#air.tags.Track","title":"Track","text":"<pre><code>Track(*children, default=None, kind=None, label=None, srclang=None, src=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines text tracks for media elements ( and ) Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    default: str | None = None,\n    kind: str | None = None,\n    label: str | None = None,\n    srclang: str | None = None,\n    src: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n    self.self_closing = True\n</code></pre>"},{"location":"api/tags/t-z/#air.tags.U","title":"U","text":"<pre><code>U(*children, compact=None, type=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines some text that is unarticulated and styled differently from normal text</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    compact: str | None = None,\n    type: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"},{"location":"api/tags/t-z/#air.tags.Video","title":"Video","text":"<pre><code>Video(*children, src=None, autoplay=None, controls=None, controlslist=None, crossorigin=None, disablepictureinpicture=None, disableremoteplayback=None, height=None, width=None, loop=None, muted=None, playsinline=None, poster=None, preload=None, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>Defines embedded video content</p> Source code in <code>src/air/tags.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    src: str | None = None,\n    autoplay: str | None = None,\n    controls: str | None = None,\n    controlslist: str | None = None,\n    crossorigin: str | None = None,\n    disablepictureinpicture: str | None = None,\n    disableremoteplayback: str | None = None,\n    height: str | int | None = None,\n    width: str | int | None = None,\n    loop: str | None = None,\n    muted: str | None = None,\n    playsinline: str | None = None,\n    poster: str | None = None,\n    preload: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: str | float | int | bool,\n):\n    super().__init__(*children, **kwargs | locals_cleanup(locals(), self))\n</code></pre>"}]}